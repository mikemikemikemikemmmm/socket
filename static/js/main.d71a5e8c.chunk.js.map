{"version":3,"sources":["lobby.js","room.js","action.js","wrapper.js","reducer.js","serviceWorker.js","index.js"],"names":["lobby","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","createRoomData","isRandomColor","gridNum","playerMaxNum","nowPlayerTurn","playerName","isPlayerNamePass","isGridPass","Number","alert","checkForm","tempData","assign","createRoom","roomId","isNamePass","joinRoom","_this2","createData","react_default","a","createElement","type","min","max","defaultValue","onChange","e","setState","objectSpread","target","value","disabled","onClick","name","checked","roomList","map","room","key","playerData","length","Component","connect","dispatch","playerList","isHost","nextProps","nextState","temp","find","toConsumableArray","quitRoom","back","errorRender","_this3","startGame","player","id","SET_PLAYERNAME","SET_ROOMLIST","SET_ROOMID","SET_ISHOST","SET_JOINEDROOMDATA","setJoinedRoomData","payload","setIsHost","setPlayerName","setRoomId","wrapper","io","require","socket","process","isPlaying","history","createBrowserHistory","location","unlisten","listen","action","console","log","initOn","on","playerId","rowIndex","gridIndex","roomData","arguments","undefined","self","concat","query","once","push","emit","close","_this4","react_router","path","render","src_room","src_lobby","initialState","joinedRoomData","reducer","Boolean","window","hostname","match","store","createStore","ReactDOM","es","src_wrapper","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d71a5e8c.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nclass lobby extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            createRoomData: {\r\n                isRandomColor: true,\r\n                gridNum: 5,\r\n                playerMaxNum: 2,\r\n                nowPlayerTurn: 1\r\n            },\r\n            playerName: '',\r\n        }\r\n    }\r\n    checkForm() {\r\n        const isPlayerNamePass = this.state.playerName !== '' ? true : false\r\n        const isGridPass = Number(5 <= this.state.createRoomData.gridNum) && Number(this.state.createRoomData.gridNum <= 30) ? true : false\r\n        if (isPlayerNamePass === true && isGridPass === true) {\r\n            return true\r\n        } else {\r\n            alert('請確認名字都有填上以及格子數在5~30之間')\r\n            return false\r\n        }\r\n    }\r\n    isNamePass() {\r\n        if (this.state.playerName !== '') {\r\n            return true\r\n        } else {\r\n            alert('請輸入名字')\r\n            return false\r\n        }\r\n    }\r\n    createRoom() {\r\n        if (this.checkForm() === false) {\r\n            return\r\n        }\r\n        const tempData = Object.assign({}, this.state.createRoomData)\r\n        tempData.playerName = this.state.playerName\r\n        this.props.createRoom(tempData)\r\n    }\r\n    joinRoom(roomId) {\r\n        if (!this.isNamePass()) {\r\n            return\r\n        }\r\n        this.props.joinRoom(roomId, this.state.playerName, false)\r\n    }\r\n    render() {\r\n        const createData = this.state.createRoomData\r\n        const playerMaxNum = createData.playerMaxNum\r\n        return (\r\n            <div>\r\n                請選擇邊格數\r\n                <input type=\"number\" min=\"5\" max=\"30\" defaultValue='5' onChange={(e) => this.setState({ createRoomData: { ...createData, gridNum: Number(e.target.value) } })} />\r\n                請選擇人數\r\n                <button disabled={playerMaxNum <= 2} onClick={() => this.setState({ createRoomData: { ...createData, playerMaxNum: createData.playerMaxNum - 1 } })}>-</button>\r\n                {playerMaxNum}\r\n                <button disabled={playerMaxNum >= 8} onClick={() => this.setState({ createRoomData: { ...createData, playerMaxNum: createData.playerMaxNum + 1 } })}>+</button>\r\n                <span>請輸入名稱<input type=\"text\" onChange={(e) => this.setState({ playerName: e.target.value })} /></span>\r\n                顏色分配\r\n                隨機<input type=\"radio\" name=\"color-radio\" onChange={() => this.setState({ createRoomData: { ...createData, isRandomColor: true } })} checked />\r\n                同色<input type=\"radio\" name=\"color-radio\" onChange={() => this.setState({ createRoomData: { ...createData, isRandomColor: false } })} />\r\n                <button onClick={() => this.createRoom()} >創造房間</button>\r\n                <div>\r\n\r\n                </div>\r\n\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>房間號碼</th>\r\n                            <th>目前人數</th>\r\n                            <th>最大人數</th>\r\n                            <th>加入房間</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.props.state.roomList.map(room =>\r\n                            <tr key={room.roomId }>\r\n                                <td>{room.roomId}</td>\r\n                                <td>{room.playerData.length}</td>\r\n                                <td>{room.playerMaxNum}</td>\r\n                                <td><button disabled={room.playerData.length >= room.playerMaxNum ? true : false} onClick={() => this.joinRoom(room.roomId)} >加入房間</button></td>\r\n                            </tr>)}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default connect(state => { return { state } }, dispatch => { return { dispatch } })(lobby)    ","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Chess from './chess'\r\n//import ChessBoard from './checkerboard'\r\nclass room extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            playerList: []\r\n        }\r\n        this.isHost = false\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (nextProps !== this.props) {\r\n            const temp = nextProps.state.roomList.find(room => room.roomId === this.props.state.roomId)\r\n            if (temp) {\r\n                this.setState({ playerList: [...temp.playerData] })\r\n                return false\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n        if (nextState !== this.state) {\r\n            //console.log('room 更新')\r\n            //console.log(this.props.state.joinedRoomData)\r\n            return true\r\n        }\r\n    }\r\n    quitRoom() {\r\n        this.props.quitRoom(this.props.state.isHost)\r\n    }\r\n    errorRender(){\r\n        this.props.back()\r\n    }\r\n    componentDidMount(){\r\n        if(this.props.state.roomList.length ===0){\r\n            this.errorRender()\r\n        }\r\n    }\r\n    render() {\r\n\r\n        return (<div>\r\n            {this.state.playerList.length !== 0 ?\r\n                <div>\r\n                    <button disabled={this.state.playerList.length <= 1} onClick={() => this.startGame()}>開始遊戲</button>\r\n                    <button onClick={() => this.quitRoom()}>返回大廳</button>\r\n                    目前玩家{this.state.playerList.map(player => <div key={player.id}>{player.playerName}</div>)}\r\n                </div> \r\n                : null}\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default connect(state => { return { state } }, dispatch => { return { dispatch } })(room)    ","\r\nexport const SET_PLAYERNAME = 'SET_PLAYERNAME'\r\nexport const SET_ROOMLIST = 'SET_ROOMLIST'\r\nexport const SET_ROOMID = 'SET_ROOMID'\r\nexport const SET_ISHOST = 'SET_ISHOST'\r\nexport const SET_JOINEDROOMDATA = 'SET_JOINEDROOMDATA'\r\n\r\nexport function setJoinedRoomData(payload) {\r\n    return { type: SET_JOINEDROOMDATA , payload: payload}\r\n}\r\nexport function setIsHost(payload) {\r\n    return { type: SET_ISHOST , payload: payload}\r\n}\r\nexport function setPlayerName(payload) {\r\n    return { type: SET_PLAYERNAME , payload: payload}\r\n}\r\n\r\nexport function setRoomList(payload) {\r\n    return { type: SET_ROOMLIST, payload: payload }\r\n}\r\n\r\nexport function setRoomId(payload) {\r\n    return { type: SET_ROOMID, payload: payload }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Lobby from './lobby'\r\nimport Room from './room'\r\nimport { Router, Route, Switch } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history'\r\nimport { connect } from 'react-redux'\r\nimport { setPlayerName, setRoomList, setRoomId, setIsHost, setJoinedRoomData } from './action'\r\n\r\nclass wrapper extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.io = require('socket.io-client');\r\n        this.socket = this.io(process.env.REACT_APP_BACKHOST);\r\n        this.isPlaying = false\r\n        this.history = createBrowserHistory();\r\n        this.location = this.history.location\r\n        this.unlisten = this.history.listen((location, action) => {\r\n            console.log('跳轉')\r\n        });\r\n    }\r\n    componentDidMount() {\r\n        this.initOn()\r\n    }\r\n    initOn() {\r\n        this.socket.on('roomDelete', function (a) {\r\n            console.log(a)\r\n        })\r\n        this.socket.on('renewRoomList', roomList => {\r\n            if (!this.isPlaying) {\r\n                this.props.dispatch(setRoomList(roomList))\r\n                console.log('更新房間資料')\r\n            }\r\n        })\r\n        this.socket.on('changePlayerTurn', (playerId) => {\r\n\r\n        })\r\n        this.socket.on('makeAChess', (rowIndex, gridIndex) => {\r\n\r\n        })\r\n        this.socket.on('overGame')\r\n        this.socket.on('renewPlayerInRoom', function (roomData) {\r\n        })\r\n        this.socket.on('connect', function () {\r\n            console.log(`接受到connect事件`)\r\n        })\r\n    }\r\n    findMatchRoomData() {\r\n        return this.state.roomList.find(room =>\r\n            room.id === this.state.roomId\r\n        )\r\n    }\r\n    joinRoom(roomId, playerName, isHost = false) {\r\n        const self = this\r\n        this.socket = this.io(`${process.env.REACT_APP_BACKHOST}${roomId}`,\r\n            { query: `playerName=${playerName}` })\r\n        this.socket.once('roomDelete', function () {\r\n            self.quitRoom(isHost)\r\n            alert('房主退出')\r\n        })\r\n        this.socket.once('connect', function () {\r\n            console.log(`接受到房間connect事件`)\r\n            self.socket.once('sendRoomData', function (roomData) {\r\n                self.props.dispatch(setJoinedRoomData(roomData))\r\n                self.props.dispatch(setIsHost(isHost))\r\n            })\r\n            self.props.dispatch(setRoomId(roomId))\r\n            self.props.dispatch(setPlayerName(playerName))\r\n            self.history.push(`/room/${roomId}`)\r\n        });\r\n    }\r\n    quitRoom(isHost) {\r\n        console.log('退回大廳')\r\n        if (isHost) {\r\n            this.socket.emit('hostDisconnect')\r\n            console.log('房主退出')\r\n        }\r\n        this.history.push(`/`)\r\n        this.socket.close()\r\n        this.socket = this.io(process.env.REACT_APP_BACKHOST);\r\n        this.props.dispatch(setRoomId(null))\r\n        this.props.dispatch(setPlayerName(''))\r\n        this.props.dispatch(setIsHost(false))\r\n        this.props.dispatch(setJoinedRoomData(null))\r\n\r\n    }\r\n    createRoom(roomData) {\r\n        const self = this\r\n        this.socket.emit('createRoom', roomData)\r\n        this.socket.once('createRoomDone', roomId => {\r\n            self.joinRoom(roomId, roomData.playerName, true)\r\n        })\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            < Router history={this.history}>\r\n                <section>\r\n                    <Switch>\r\n                        <Route\r\n                            path='/room/:roomId'\r\n                            render={() => <Room\r\n                                quitRoom={(isHost) => this.quitRoom(isHost)} \r\n                                back={()=>this.history.push('/')}/>}\r\n                        />\r\n                        <Route\r\n                            path='/'\r\n                            render={() =>\r\n                                <Lobby\r\n                                    joinRoom={(roomId, playerName, isHost) => this.joinRoom(roomId, playerName, isHost)}\r\n                                    createRoom={(roomData) => this.createRoom(roomData)}\r\n                                />}\r\n                        />\r\n                    </Switch>\r\n                </section>\r\n            </Router >\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(state => { return { state } }, dispatch => { return { dispatch } })(wrapper)    ","const initialState = {\r\n    roomId: null,\r\n    roomList: [],\r\n    playerName: '',\r\n    isHost: false,\r\n    joinedRoomData:{}\r\n}\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_JOINEDROOMDATA':\r\n            return Object.assign({}, state, {\r\n                joinedRoomData: action.payload\r\n            })\r\n        case 'SET_ROOMID':\r\n            return Object.assign({}, state, {\r\n                roomId: action.payload\r\n            })\r\n        case 'SET_ROOMLIST':\r\n            return Object.assign({}, state, {\r\n                roomList: action.payload\r\n            })\r\n        case 'SET_PLAYERNAME':\r\n            return Object.assign({}, state, {\r\n                playerName: action.payload\r\n            })\r\n        case 'SET_ISHOST':\r\n            return Object.assign({}, state, {\r\n                isHost: action.payload\r\n            })\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default reducer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Wrapper from './wrapper'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport reducer from './reducer'\nimport * as serviceWorker from './serviceWorker';\nlet store = createStore(reducer)\nconsole.log('連上')\nReactDOM.render(\n    <Provider store={store}>\n        <Wrapper />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}